// Copyright 2013
// Author: Christopher Van Arsdale
//
// THIS CODE IS AUTO-GENERATED BY callback_gen.go, DO NOT MODIFY DIRECTLY
//
// Note: This was originally implemented with std::bind/std::function, but
// you cannot declare them ahead of time (for anything with an argument and an
// object) so passing the callbacks around is not tenable.

#ifndef _COMMON_BASE_CALLBACK_H__
#define _COMMON_BASE_CALLBACK_H__

#include "common/base/macros.h"

class Closure {
 public:
  Closure() {}
  virtual ~Closure() {}
  virtual void Run() = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Closure);
};

template <typename Arg0>
class Callback1 {
 public:
  Callback1() {}
  virtual ~Callback1() {}
  virtual void Run(Arg0 arg0) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback1);
};

template <typename Arg0, typename Arg1>
class Callback2 {
 public:
  Callback2() {}
  virtual ~Callback2() {}
  virtual void Run(Arg0 arg0, Arg1 arg1) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback2);
};

template <typename Arg0, typename Arg1, typename Arg2>
class Callback3 {
 public:
  Callback3() {}
  virtual ~Callback3() {}
  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback3);
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class Callback4 {
 public:
  Callback4() {}
  virtual ~Callback4() {}
  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback4);
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class Callback5 {
 public:
  Callback5() {}
  virtual ~Callback5() {}
  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback5);
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class Callback6 {
 public:
  Callback6() {}
  virtual ~Callback6() {}
  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback6);
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class Callback7 {
 public:
  Callback7() {}
  virtual ~Callback7() {}
  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) = 0;
  virtual bool IsPermanentCallback() = 0;
 private: 
  DISALLOW_COPY_AND_ASSIGN(Callback7);
};

class FunctionCallback0_0 : public Closure {
 public:
  typedef void (*Func)();
  FunctionCallback0_0(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_();
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_0);

  bool perm_;
  Func func_;
};

template <typename Object>
class MemberCallback0_0 : public Closure {
 public:
  typedef void (Object::*Func)();
  MemberCallback0_0(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)();
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_0);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0>
class FunctionCallback1_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0);
  FunctionCallback1_0(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0>
class MemberCallback1_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0);
  MemberCallback1_0(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0>
class FunctionCallback0_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0);
  FunctionCallback0_1(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_1() {}

  virtual void Run(Arg0 arg0) {
    bool del = !perm_;
    func_(arg0);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_1);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0>
class MemberCallback0_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0);
  MemberCallback0_1(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_1() {}

  virtual void Run(Arg0 arg0) {
    bool del = !perm_;
    (object_->*func_)(arg0);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_1);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0, typename Arg1>
class FunctionCallback2_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1);
  FunctionCallback2_0(bool perm, Func func, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1){
  }
  virtual ~FunctionCallback2_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_, arg1_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback2_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Object, typename Arg0, typename Arg1>
class MemberCallback2_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1);
  MemberCallback2_0(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1){
  }
  virtual ~MemberCallback2_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback2_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Arg0, typename Arg1>
class FunctionCallback1_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1);
  FunctionCallback1_1(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_1() {}

  virtual void Run(Arg1 arg1) {
    bool del = !perm_;
    func_(arg0_, arg1);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_1);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0, typename Arg1>
class MemberCallback1_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1);
  MemberCallback1_1(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_1() {}

  virtual void Run(Arg1 arg1) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_1);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0, typename Arg1>
class FunctionCallback0_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1);
  FunctionCallback0_2(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_2() {}

  virtual void Run(Arg0 arg0, Arg1 arg1) {
    bool del = !perm_;
    func_(arg0, arg1);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_2);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0, typename Arg1>
class MemberCallback0_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1);
  MemberCallback0_2(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_2() {}

  virtual void Run(Arg0 arg0, Arg1 arg1) {
    bool del = !perm_;
    (object_->*func_)(arg0, arg1);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_2);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0, typename Arg1, typename Arg2>
class FunctionCallback3_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  FunctionCallback3_0(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~FunctionCallback3_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback3_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2>
class MemberCallback3_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  MemberCallback3_0(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~MemberCallback3_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback3_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Arg0, typename Arg1, typename Arg2>
class FunctionCallback2_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  FunctionCallback2_1(bool perm, Func func, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1){
  }
  virtual ~FunctionCallback2_1() {}

  virtual void Run(Arg2 arg2) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback2_1);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2>
class MemberCallback2_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  MemberCallback2_1(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1){
  }
  virtual ~MemberCallback2_1() {}

  virtual void Run(Arg2 arg2) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback2_1);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Arg0, typename Arg1, typename Arg2>
class FunctionCallback1_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  FunctionCallback1_2(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_2() {}

  virtual void Run(Arg1 arg1, Arg2 arg2) {
    bool del = !perm_;
    func_(arg0_, arg1, arg2);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_2);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2>
class MemberCallback1_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  MemberCallback1_2(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_2() {}

  virtual void Run(Arg1 arg1, Arg2 arg2) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1, arg2);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_2);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0, typename Arg1, typename Arg2>
class FunctionCallback0_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  FunctionCallback0_3(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_3() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2) {
    bool del = !perm_;
    func_(arg0, arg1, arg2);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_3);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2>
class MemberCallback0_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2);
  MemberCallback0_3(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_3() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2) {
    bool del = !perm_;
    (object_->*func_)(arg0, arg1, arg2);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_3);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class FunctionCallback4_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  FunctionCallback4_0(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~FunctionCallback4_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback4_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class MemberCallback4_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  MemberCallback4_0(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~MemberCallback4_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback4_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class FunctionCallback3_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  FunctionCallback3_1(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~FunctionCallback3_1() {}

  virtual void Run(Arg3 arg3) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback3_1);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class MemberCallback3_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  MemberCallback3_1(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~MemberCallback3_1() {}

  virtual void Run(Arg3 arg3) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback3_1);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class FunctionCallback2_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  FunctionCallback2_2(bool perm, Func func, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1){
  }
  virtual ~FunctionCallback2_2() {}

  virtual void Run(Arg2 arg2, Arg3 arg3) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback2_2);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class MemberCallback2_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  MemberCallback2_2(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1){
  }
  virtual ~MemberCallback2_2() {}

  virtual void Run(Arg2 arg2, Arg3 arg3) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback2_2);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class FunctionCallback1_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  FunctionCallback1_3(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_3() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    bool del = !perm_;
    func_(arg0_, arg1, arg2, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_3);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class MemberCallback1_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  MemberCallback1_3(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_3() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1, arg2, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_3);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class FunctionCallback0_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  FunctionCallback0_4(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_4() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    bool del = !perm_;
    func_(arg0, arg1, arg2, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_4);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
class MemberCallback0_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3);
  MemberCallback0_4(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_4() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
    bool del = !perm_;
    (object_->*func_)(arg0, arg1, arg2, arg3);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_4);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class FunctionCallback5_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  FunctionCallback5_0(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4){
  }
  virtual ~FunctionCallback5_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback5_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class MemberCallback5_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  MemberCallback5_0(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4){
  }
  virtual ~MemberCallback5_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback5_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class FunctionCallback4_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  FunctionCallback4_1(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~FunctionCallback4_1() {}

  virtual void Run(Arg4 arg4) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback4_1);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class MemberCallback4_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  MemberCallback4_1(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~MemberCallback4_1() {}

  virtual void Run(Arg4 arg4) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback4_1);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class FunctionCallback3_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  FunctionCallback3_2(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~FunctionCallback3_2() {}

  virtual void Run(Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback3_2);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class MemberCallback3_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  MemberCallback3_2(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~MemberCallback3_2() {}

  virtual void Run(Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback3_2);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class FunctionCallback2_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  FunctionCallback2_3(bool perm, Func func, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1){
  }
  virtual ~FunctionCallback2_3() {}

  virtual void Run(Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback2_3);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class MemberCallback2_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  MemberCallback2_3(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1){
  }
  virtual ~MemberCallback2_3() {}

  virtual void Run(Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback2_3);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class FunctionCallback1_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  FunctionCallback1_4(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_4() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    func_(arg0_, arg1, arg2, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_4);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class MemberCallback1_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  MemberCallback1_4(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_4() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1, arg2, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_4);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class FunctionCallback0_5 : public Callback5<Arg0, Arg1, Arg2, Arg3, Arg4> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  FunctionCallback0_5(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_5() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    func_(arg0, arg1, arg2, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_5);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class MemberCallback0_5 : public Callback5<Arg0, Arg1, Arg2, Arg3, Arg4> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);
  MemberCallback0_5(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_5() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
    bool del = !perm_;
    (object_->*func_)(arg0, arg1, arg2, arg3, arg4);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_5);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback6_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback6_0(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4), arg5_(arg5){
  }
  virtual ~FunctionCallback6_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4_, arg5_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback6_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback6_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback6_0(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4), arg5_(arg5){
  }
  virtual ~MemberCallback6_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4_, arg5_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback6_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback5_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback5_1(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4){
  }
  virtual ~FunctionCallback5_1() {}

  virtual void Run(Arg5 arg5) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4_, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback5_1);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback5_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback5_1(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4){
  }
  virtual ~MemberCallback5_1() {}

  virtual void Run(Arg5 arg5) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4_, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback5_1);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback4_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback4_2(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~FunctionCallback4_2() {}

  virtual void Run(Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback4_2);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback4_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback4_2(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~MemberCallback4_2() {}

  virtual void Run(Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback4_2);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback3_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback3_3(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~FunctionCallback3_3() {}

  virtual void Run(Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback3_3);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback3_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback3_3(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~MemberCallback3_3() {}

  virtual void Run(Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback3_3);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback2_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback2_4(bool perm, Func func, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1){
  }
  virtual ~FunctionCallback2_4() {}

  virtual void Run(Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback2_4);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback2_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback2_4(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1){
  }
  virtual ~MemberCallback2_4() {}

  virtual void Run(Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback2_4);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback1_5 : public Callback5<Arg0, Arg1, Arg2, Arg3, Arg4> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback1_5(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_5() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    func_(arg0_, arg1, arg2, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_5);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback1_5 : public Callback5<Arg0, Arg1, Arg2, Arg3, Arg4> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback1_5(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_5() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1, arg2, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_5);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class FunctionCallback0_6 : public Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  FunctionCallback0_6(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_6() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    func_(arg0, arg1, arg2, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_6);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class MemberCallback0_6 : public Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);
  MemberCallback0_6(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_6() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
    bool del = !perm_;
    (object_->*func_)(arg0, arg1, arg2, arg3, arg4, arg5);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_6);

  bool perm_;
  Func func_;
  Object* object_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback7_0 : public Closure {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback7_0(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4), arg5_(arg5), arg6_(arg6){
  }
  virtual ~FunctionCallback7_0() {}

  virtual void Run() {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4_, arg5_, arg6_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback7_0);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
  Arg6 arg6_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback7_0 : public Closure {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback7_0(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4), arg5_(arg5), arg6_(arg6){
  }
  virtual ~MemberCallback7_0() {}

  virtual void Run() {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4_, arg5_, arg6_);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback7_0);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
  Arg6 arg6_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback6_1 : public Callback1<Arg0> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback6_1(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4), arg5_(arg5){
  }
  virtual ~FunctionCallback6_1() {}

  virtual void Run(Arg6 arg6) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4_, arg5_, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback6_1);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback6_1 : public Callback1<Arg0> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback6_1(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4), arg5_(arg5){
  }
  virtual ~MemberCallback6_1() {}

  virtual void Run(Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4_, arg5_, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback6_1);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
  Arg5 arg5_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback5_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback5_2(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4){
  }
  virtual ~FunctionCallback5_2() {}

  virtual void Run(Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4_, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback5_2);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback5_2 : public Callback2<Arg0, Arg1> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback5_2(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3), arg4_(arg4){
  }
  virtual ~MemberCallback5_2() {}

  virtual void Run(Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4_, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback5_2);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
  Arg4 arg4_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback4_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback4_3(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~FunctionCallback4_3() {}

  virtual void Run(Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3_, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback4_3);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback4_3 : public Callback3<Arg0, Arg1, Arg2> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback4_3(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2), arg3_(arg3){
  }
  virtual ~MemberCallback4_3() {}

  virtual void Run(Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3_, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback4_3);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
  Arg3 arg3_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback3_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback3_4(bool perm, Func func, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~FunctionCallback3_4() {}

  virtual void Run(Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2_, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback3_4);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback3_4 : public Callback4<Arg0, Arg1, Arg2, Arg3> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback3_4(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1, Arg2 arg2)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1), arg2_(arg2){
  }
  virtual ~MemberCallback3_4() {}

  virtual void Run(Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2_, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback3_4);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
  Arg2 arg2_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback2_5 : public Callback5<Arg0, Arg1, Arg2, Arg3, Arg4> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback2_5(bool perm, Func func, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), arg0_(arg0), arg1_(arg1){
  }
  virtual ~FunctionCallback2_5() {}

  virtual void Run(Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    func_(arg0_, arg1_, arg2, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback2_5);

  bool perm_;
  Func func_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback2_5 : public Callback5<Arg0, Arg1, Arg2, Arg3, Arg4> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback2_5(bool perm, Func func, Object* obj, Arg0 arg0, Arg1 arg1)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0), arg1_(arg1){
  }
  virtual ~MemberCallback2_5() {}

  virtual void Run(Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1_, arg2, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback2_5);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
  Arg1 arg1_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback1_6 : public Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback1_6(bool perm, Func func, Arg0 arg0)
    : perm_(perm), func_(func), arg0_(arg0){
  }
  virtual ~FunctionCallback1_6() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    func_(arg0_, arg1, arg2, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback1_6);

  bool perm_;
  Func func_;
  Arg0 arg0_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback1_6 : public Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback1_6(bool perm, Func func, Object* obj, Arg0 arg0)
    : perm_(perm), func_(func), object_(obj), arg0_(arg0){
  }
  virtual ~MemberCallback1_6() {}

  virtual void Run(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0_, arg1, arg2, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback1_6);

  bool perm_;
  Func func_;
  Object* object_;
  Arg0 arg0_;
};

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class FunctionCallback0_7 : public Callback7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {
 public:
  typedef void (*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  FunctionCallback0_7(bool perm, Func func)
    : perm_(perm), func_(func){
  }
  virtual ~FunctionCallback0_7() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    func_(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(FunctionCallback0_7);

  bool perm_;
  Func func_;
};

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
class MemberCallback0_7 : public Callback7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> {
 public:
  typedef void (Object::*Func)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);
  MemberCallback0_7(bool perm, Func func, Object* obj)
    : perm_(perm), func_(func), object_(obj){
  }
  virtual ~MemberCallback0_7() {}

  virtual void Run(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
    bool del = !perm_;
    (object_->*func_)(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    if (del) { delete this; }
  }
  virtual bool IsPermanentCallback() { return perm_; }

 private:
  DISALLOW_COPY_AND_ASSIGN(MemberCallback0_7);

  bool perm_;
  Func func_;
  Object* object_;
};



inline Closure* NewCallback(void (*f)()) {
  return new FunctionCallback0_0(
    false,
    f);
}


inline Closure* NewPermanentCallback(void (*f)()) {
  return new FunctionCallback0_0(
    true,
    f);
}

template <typename Object, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)()) {
  return new MemberCallback0_0<Object>(
    false,
    f,
    object);
}

template <typename Object, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)()) {
  return new MemberCallback0_0<Object>(
    true,
    f,
    object);
}

template <typename Arg0>
inline Closure* NewCallback(void (*f)(Arg0 arg0), Arg0 arg0) {
  return new FunctionCallback1_0<Arg0>(
    false,
    f,
    arg0);
}

template <typename Arg0>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0), Arg0 arg0) {
  return new FunctionCallback1_0<Arg0>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0), Arg0 arg0) {
  return new MemberCallback1_0<Object,Arg0>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0), Arg0 arg0) {
  return new MemberCallback1_0<Object,Arg0>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0>
inline Callback1<Arg0>* NewCallback(void (*f)(Arg0 arg0)) {
  return new FunctionCallback0_1<Arg0>(
    false,
    f);
}

template <typename Arg0>
inline Callback1<Arg0>* NewPermanentCallback(void (*f)(Arg0 arg0)) {
  return new FunctionCallback0_1<Arg0>(
    true,
    f);
}

template <typename Object, typename Arg0, typename InputObject=Object>
inline Callback1<Arg0>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0)) {
  return new MemberCallback0_1<Object,Arg0>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename InputObject=Object>
inline Callback1<Arg0>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0)) {
  return new MemberCallback0_1<Object,Arg0>(
    true,
    f,
    object);
}

template <typename Arg0, typename Arg1>
inline Closure* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_0<Arg0,Arg1>(
    false,
    f,
    arg0, arg1);
}

template <typename Arg0, typename Arg1>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_0<Arg0,Arg1>(
    true,
    f,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_0<Object,Arg0,Arg1>(
    false,
    f,
    object,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_0<Object,Arg0,Arg1>(
    true,
    f,
    object,
    arg0, arg1);
}

template <typename Arg0, typename Arg1>
inline Callback1<Arg1>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0) {
  return new FunctionCallback1_1<Arg0,Arg1>(
    false,
    f,
    arg0);
}

template <typename Arg0, typename Arg1>
inline Callback1<Arg1>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0) {
  return new FunctionCallback1_1<Arg0,Arg1>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename InputObject=Object>
inline Callback1<Arg1>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0) {
  return new MemberCallback1_1<Object,Arg0,Arg1>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename InputObject=Object>
inline Callback1<Arg1>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1), Arg0 arg0) {
  return new MemberCallback1_1<Object,Arg0,Arg1>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0, typename Arg1>
inline Callback2<Arg0, Arg1>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1)) {
  return new FunctionCallback0_2<Arg0,Arg1>(
    false,
    f);
}

template <typename Arg0, typename Arg1>
inline Callback2<Arg0, Arg1>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1)) {
  return new FunctionCallback0_2<Arg0,Arg1>(
    true,
    f);
}

template <typename Object, typename Arg0, typename Arg1, typename InputObject=Object>
inline Callback2<Arg0, Arg1>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1)) {
  return new MemberCallback0_2<Object,Arg0,Arg1>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename Arg1, typename InputObject=Object>
inline Callback2<Arg0, Arg1>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1)) {
  return new MemberCallback0_2<Object,Arg0,Arg1>(
    true,
    f,
    object);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Closure* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_0<Arg0,Arg1,Arg2>(
    false,
    f,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_0<Arg0,Arg1,Arg2>(
    true,
    f,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_0<Object,Arg0,Arg1,Arg2>(
    false,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_0<Object,Arg0,Arg1,Arg2>(
    true,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Callback1<Arg2>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_1<Arg0,Arg1,Arg2>(
    false,
    f,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Callback1<Arg2>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_1<Arg0,Arg1,Arg2>(
    true,
    f,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Callback1<Arg2>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_1<Object,Arg0,Arg1,Arg2>(
    false,
    f,
    object,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Callback1<Arg2>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_1<Object,Arg0,Arg1,Arg2>(
    true,
    f,
    object,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Callback2<Arg1, Arg2>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0) {
  return new FunctionCallback1_2<Arg0,Arg1,Arg2>(
    false,
    f,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Callback2<Arg1, Arg2>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0) {
  return new FunctionCallback1_2<Arg0,Arg1,Arg2>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Callback2<Arg1, Arg2>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0) {
  return new MemberCallback1_2<Object,Arg0,Arg1,Arg2>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Callback2<Arg1, Arg2>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2), Arg0 arg0) {
  return new MemberCallback1_2<Object,Arg0,Arg1,Arg2>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Callback3<Arg0, Arg1, Arg2>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2)) {
  return new FunctionCallback0_3<Arg0,Arg1,Arg2>(
    false,
    f);
}

template <typename Arg0, typename Arg1, typename Arg2>
inline Callback3<Arg0, Arg1, Arg2>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2)) {
  return new FunctionCallback0_3<Arg0,Arg1,Arg2>(
    true,
    f);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Callback3<Arg0, Arg1, Arg2>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2)) {
  return new MemberCallback0_3<Object,Arg0,Arg1,Arg2>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename InputObject=Object>
inline Callback3<Arg0, Arg1, Arg2>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2)) {
  return new MemberCallback0_3<Object,Arg0,Arg1,Arg2>(
    true,
    f,
    object);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Closure* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_0<Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_0<Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_0<Object,Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_0<Object,Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback1<Arg3>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_1<Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback1<Arg3>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_1<Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback1<Arg3>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_1<Object,Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback1<Arg3>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_1<Object,Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback2<Arg2, Arg3>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_2<Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback2<Arg2, Arg3>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_2<Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback2<Arg2, Arg3>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_2<Object,Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    object,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback2<Arg2, Arg3>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_2<Object,Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    object,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback3<Arg1, Arg2, Arg3>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0) {
  return new FunctionCallback1_3<Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback3<Arg1, Arg2, Arg3>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0) {
  return new FunctionCallback1_3<Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback3<Arg1, Arg2, Arg3>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0) {
  return new MemberCallback1_3<Object,Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback3<Arg1, Arg2, Arg3>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3), Arg0 arg0) {
  return new MemberCallback1_3<Object,Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback4<Arg0, Arg1, Arg2, Arg3>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)) {
  return new FunctionCallback0_4<Arg0,Arg1,Arg2,Arg3>(
    false,
    f);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
inline Callback4<Arg0, Arg1, Arg2, Arg3>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)) {
  return new FunctionCallback0_4<Arg0,Arg1,Arg2,Arg3>(
    true,
    f);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback4<Arg0, Arg1, Arg2, Arg3>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)) {
  return new MemberCallback0_4<Object,Arg0,Arg1,Arg2,Arg3>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename InputObject=Object>
inline Callback4<Arg0, Arg1, Arg2, Arg3>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3)) {
  return new MemberCallback0_4<Object,Arg0,Arg1,Arg2,Arg3>(
    true,
    f,
    object);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Closure* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new FunctionCallback5_0<Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new FunctionCallback5_0<Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new MemberCallback5_0<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new MemberCallback5_0<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback1<Arg4>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_1<Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback1<Arg4>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_1<Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback1<Arg4>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_1<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback1<Arg4>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_1<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback2<Arg3, Arg4>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_2<Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback2<Arg3, Arg4>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_2<Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback2<Arg3, Arg4>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_2<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback2<Arg3, Arg4>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_2<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback3<Arg2, Arg3, Arg4>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_3<Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback3<Arg2, Arg3, Arg4>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_3<Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback3<Arg2, Arg3, Arg4>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_3<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    object,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback3<Arg2, Arg3, Arg4>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_3<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    object,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback4<Arg1, Arg2, Arg3, Arg4>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0) {
  return new FunctionCallback1_4<Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback4<Arg1, Arg2, Arg3, Arg4>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0) {
  return new FunctionCallback1_4<Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback4<Arg1, Arg2, Arg3, Arg4>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0) {
  return new MemberCallback1_4<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback4<Arg1, Arg2, Arg3, Arg4>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4), Arg0 arg0) {
  return new MemberCallback1_4<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback5<Arg0, Arg1, Arg2, Arg3, Arg4>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)) {
  return new FunctionCallback0_5<Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
inline Callback5<Arg0, Arg1, Arg2, Arg3, Arg4>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)) {
  return new FunctionCallback0_5<Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback5<Arg0, Arg1, Arg2, Arg3, Arg4>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)) {
  return new MemberCallback0_5<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename InputObject=Object>
inline Callback5<Arg0, Arg1, Arg2, Arg3, Arg4>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)) {
  return new MemberCallback0_5<Object,Arg0,Arg1,Arg2,Arg3,Arg4>(
    true,
    f,
    object);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Closure* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new FunctionCallback6_0<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new FunctionCallback6_0<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new MemberCallback6_0<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new MemberCallback6_0<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback1<Arg5>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new FunctionCallback5_1<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback1<Arg5>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new FunctionCallback5_1<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback1<Arg5>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new MemberCallback5_1<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback1<Arg5>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new MemberCallback5_1<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback2<Arg4, Arg5>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_2<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback2<Arg4, Arg5>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_2<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback2<Arg4, Arg5>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_2<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback2<Arg4, Arg5>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_2<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback3<Arg3, Arg4, Arg5>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_3<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback3<Arg3, Arg4, Arg5>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_3<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback3<Arg3, Arg4, Arg5>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_3<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback3<Arg3, Arg4, Arg5>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_3<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback4<Arg2, Arg3, Arg4, Arg5>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_4<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback4<Arg2, Arg3, Arg4, Arg5>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_4<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback4<Arg2, Arg3, Arg4, Arg5>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_4<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback4<Arg2, Arg3, Arg4, Arg5>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_4<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback5<Arg1, Arg2, Arg3, Arg4, Arg5>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0) {
  return new FunctionCallback1_5<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback5<Arg1, Arg2, Arg3, Arg4, Arg5>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0) {
  return new FunctionCallback1_5<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback5<Arg1, Arg2, Arg3, Arg4, Arg5>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0) {
  return new MemberCallback1_5<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback5<Arg1, Arg2, Arg3, Arg4, Arg5>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5), Arg0 arg0) {
  return new MemberCallback1_5<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)) {
  return new FunctionCallback0_6<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
inline Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)) {
  return new FunctionCallback0_6<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)) {
  return new MemberCallback0_6<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename InputObject=Object>
inline Callback6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)) {
  return new MemberCallback0_6<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5>(
    true,
    f,
    object);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Closure* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
  return new FunctionCallback7_0<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Closure* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
  return new FunctionCallback7_0<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Closure* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
  return new MemberCallback7_0<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Closure* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) {
  return new MemberCallback7_0<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4, arg5, arg6);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback1<Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new FunctionCallback6_1<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback1<Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new FunctionCallback6_1<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback1<Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new MemberCallback6_1<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback1<Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {
  return new MemberCallback6_1<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4, arg5);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback2<Arg5, Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new FunctionCallback5_2<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback2<Arg5, Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new FunctionCallback5_2<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback2<Arg5, Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new MemberCallback5_2<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback2<Arg5, Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {
  return new MemberCallback5_2<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3, arg4);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback3<Arg4, Arg5, Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_3<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback3<Arg4, Arg5, Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new FunctionCallback4_3<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback3<Arg4, Arg5, Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_3<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback3<Arg4, Arg5, Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) {
  return new MemberCallback4_3<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0, arg1, arg2, arg3);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback4<Arg3, Arg4, Arg5, Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_4<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback4<Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new FunctionCallback3_4<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback4<Arg3, Arg4, Arg5, Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_4<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback4<Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1, Arg2 arg2) {
  return new MemberCallback3_4<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0, arg1, arg2);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback5<Arg2, Arg3, Arg4, Arg5, Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_5<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback5<Arg2, Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1) {
  return new FunctionCallback2_5<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback5<Arg2, Arg3, Arg4, Arg5, Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_5<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0, arg1);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback5<Arg2, Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0, Arg1 arg1) {
  return new MemberCallback2_5<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0, arg1);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback6<Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0) {
  return new FunctionCallback1_6<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback6<Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0) {
  return new FunctionCallback1_6<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback6<Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0) {
  return new MemberCallback1_6<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object,
    arg0);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback6<Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6), Arg0 arg0) {
  return new MemberCallback1_6<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object,
    arg0);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)) {
  return new FunctionCallback0_7<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f);
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
inline Callback7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(void (*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)) {
  return new FunctionCallback0_7<Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)) {
  return new MemberCallback0_7<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    false,
    f,
    object);
}

template <typename Object, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename InputObject=Object>
inline Callback7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>* NewPermanentCallback(InputObject* object, void(Object::*f)(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)) {
  return new MemberCallback0_7<Object,Arg0,Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    true,
    f,
    object);
}

#endif  // _COMMON_BASE_CALLBACK_H__
